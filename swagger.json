{
  "swagger": "2.0",
  "info": {
    "title": "Social Blog API",
    "description": "API for a simple social network. You can post some publications and interact with publications of other users (put likes, write comments) and follow other users.\nFor most functionality(endpoints), you should create an account or log into an existing one.\nAfter authentication, you will receive two tokens (access, refresh). An access token is required to access certain routes. The access token is valid for no more than 30 minutes.\nTo renew the access token, use the refresh token (when renewing the access token, the refresh token also changes!). The refresh token is valid for no more than 30 days",
    "version": "1.0.0"
  },
  "host": ["sn-test-app.herokuapp.com"],
  "schemes": [
    "https"
  ],
  "securityDefinitions": {
    "bearerAuth": {
      "name": "Authorization",
      "in": "header",
      "type": "apiKey",
      "description": "As a response from /user/register, /user/signIn, /user/refresh, /oauth/success (except other data) you will get access token. To stay authorized you have to attach access token to authorization header with keyword 'Bearer' space access token\nExample: \nBearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InlldmhlbnBydWRuaWsiLCJlbWFpbCI6InlldmhlbnBydWRuaWsxQGdtYWlsLmNvbSIsImlkIjoiNjJmYjQxYzcyNGQ5ODE1ZmRmNzAyNDdmIiwiaWF0IjoxNjYwNjMzNTQ0LCJleHAiOjE2NjA2Njk1NDR9.oCtkrtfuqY0CTj7fVrWCD3tAI3lWGWoruMKh-VYz4U4"
    },
    "oauthGoogle": {
      "description" : "Authorization via your Google account",
      "type": "oauth2",
      "authorizationUrl": "https://sn-test-app.herokuapp.com/oauth/google",
      "flow" : "Authorization code"
    },
    "oauthFacebook": {
      "description" : "Authorization via your Facebook account",
      "type": "oauth2",
      "authorizationUrl": "https://sn-test-app.herokuapp.com/oauth/facebook",
      "flow" : "Authorization code"
    }
  },
  "paths": {
    "/user/register" : {
      "post": {
        "summary": "Endpoint to register for the app, creating new account",
        "description" : "",
        "parameters": [
          {
            "name": "User credentials",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "username": {
                  "type": "string",
                  "example" : "User 1",
                  "min length": "5",
                  "max length": "32",
                  "required": true
                }, 
                "fullName": {
                  "type": "string",
                  "example" : "User Full Name",
                  "required": true
                },
                "email": {
                  "type": "string",
                  "example" : "user1@gmail.com",
                  "required": true
                },
                "password": {
                  "type": "string",
                  "example" : "Secret Password",
                  "min length": "5",
                  "max length": "32",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses" : {
          "200" : {
            "description" : "Access token\nUser object's id that was created. Refresh token will be set in your cookies",
            "schema": {
              "type": "object",
              "properties" : {
                "accessToken": {
                  "$ref": "#/definitions/Token"
                },
                "userId": {
                  "$ref": "#/definitions/ObjectId"
                }
              }
            }
          },
          "400" : {
            "description" : "Validation failed",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Validation failed, username and password length must be at least 5 characters each"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          },
          "409" : {
            "description" : "User is already registered",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "User yevhenprudnik@gmail.com is already registered"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/user/signIn" : {
      "post": {
        "summary": "Endpoint to login to existing account",
        "description" : "Login to your account",
        "parameters": [
          {
            "name": "User credentials",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "email": {
                  "type": "string",
                  "example" : "user1@gmail.com",
                  "required": true
                },
                "password": {
                  "type": "string",
                  "example" : "Secret Password",
                  "min length": "5",
                  "max length": "32",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Auth"
        ],
        "responses" : {
          "200" : {
            "description" : "Access token\nUser object's id. Refresh token will be set in your cookies",
            "schema": {
              "type": "object",
              "properties" : {
                "accessToken": {
                  "$ref": "#/definitions/Token"
                },
                "userId": {
                  "$ref": "#/definitions/ObjectId"
                }
              }
            }
          },
          "400" : {
            "description" : "Wrong password",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Wrong credentials"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          },
          "404" : {
            "description" : "Wrong email",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "User is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/user/signOut": {
      "get": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to logout from app via access token",
        "description": "",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200" : {
            "description" : "Signed out status",
            "schema": {
              "type": "object",
              "properties" : {
                "signOut" : {
                  "type": "boolean",
                  "example" : "true"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema" : {
              "$ref": "#/definitions/UnauthorizedError"
            }
          }
        }
      }
    },
    "/user/refresh": {
      "get": {
        "summary": "Endpoint to renew an access token via refresh token",
        "description": "Refresh token is set in your cookies",
        "tags": [
          "Auth"
        ],
        "responses" : {
          "200" : {
            "description" : "Access and refresh tokens\nUser object's id",
            "schema": {
              "type": "object",
              "properties" : {
                "accessToken": {
                  "$ref": "#/definitions/Token"
                },
                "userId": {
                  "$ref": "#/definitions/ObjectId"
                }
              }
            }
          },
          "401" : {
            "description" : "Refresh token is not valid",
            "schema": {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          }
        }
      }
    },
    "/user/check-auth": {
      "get": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to get authorized via access token and get additional data",
        "description": "",
        "tags": [
          "Auth"
        ],
        "responses": {
          "200" : {
            "description" : "User id from valid token, and additional data",
            "schema": {
              "type": "object",
              "properties" : {
                "userId": {
                  "$ref": "#/definitions/ObjectId"
                },
                "additionalData": {
                  "$ref": "#/definitions/User"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema": {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          }
        }
      }
    },
    "/post/posts": {
      "get": {
        "summary": "Endpoint to get posts/post list",
        "security": [ { "bearerAuth": [] } ],
        "description": "Response depending on query parameters you provide\n1)Nothing is provided - responses with and array of post objects that was created by your friends(if you have no friends responses with an empty array)\n2)Post Id is provided - response with a single post object only if it was created by friend\n3)Username is provided - response with an array of post objects that was created by the user only if he is your friend or you",
        "parameters": [
          {
            "name": "postId",
            "in": "query",
            "example" : "62f3d91ac6ca216a5esd8197",
            "description": "An ID of the post",
            "type": "string"
          },
          {
            "name": "postedBy",
            "in": "query",
            "example" : "yevhenprudnik",
            "description": "Username of the user you want to get pots from",
            "type": "string"
          }
        ],
        "tags": [
          "Posts"
        ],
        "responses": {
          "200": {
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Post"
              }
            }
          },
          "400": {
            "description" : "Invalid ObjectId",
            "schema" : { 
              "$ref" : "#/definitions/InvalidIdError"
            }
          },
          "404": {
            "description": "Not found",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Post is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/post/create-post" : {
      "post": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to create a post",
        "description" : "",
        "parameters": [
          {
            "name": "Post content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "header": {
                  "type": "string",
                  "example" : "Some amazing header",
                  "required": true
                },
                "text": {
                  "type": "string",
                  "example" : "Some amazing text",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Posts"
        ],
        "responses" : {
          "200" : {
            "description" : "Post object",
            "schema": {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Text field is required",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Post validation failed"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema": {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          }
        }
      }
    },
    "/post/edit-post" : {
      "post": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to edit your post",
        "description" : "",
        "parameters": [
          {
            "name": "Post Id and new content",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postId": {
                  "type": "string",
                  "example" : "62f3d92ac6ca21665e1d8197",
                  "required": true
                },
                "newText": {
                  "type": "string",
                  "example" : "Some amazing text(but better)",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Posts"
        ],
        "responses" : {
          "200" : {
            "description" : "Edited post object",
            "schema": {
              "$ref" : "#/definitions/Post"
            }
          },
          "400" : {
            "description" : "Post can be modified only by it's author",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Post can be modified only by it's author"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          }
        }
      }
    },
    "/post/like-post" : {
      "post": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to like someone's post",
        "description" : "",
        "parameters": [
          {
            "name": "Post Id",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postId": {
                  "type": "string",
                  "example" : "62f3d92ac6ca21665e1d8197",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Posts"
        ],
        "responses" : {
          "200" : {
            "description" : "Post object",
            "schema": {
              "$ref" : "#/definitions/Post"
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema": {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "404" : {
            "description" : "Post is not found",
            "schema" : {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Post is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/post/comment-post" : {
      "post": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to comment someone's post",
        "description" : "",
        "parameters": [
          {
            "name": "Post Id and comment",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postId": {
                  "type": "string",
                  "example" : "62f3d92ac6ca21665e1d8197",
                  "required": true
                },
                "comment": {
                  "type": "string",
                  "example" : "Some amazing comment",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Posts"
        ],
        "responses" : {
          "200" : {
            "description" : "Post object",
            "schema" : {
              "$ref" : "#/definitions/Post"
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema": {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "404" : {
            "description" : "Post is not found",
            "schema" : {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Post is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/post/delete-post" : {
      "delete": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to delete your post",
        "description" : "",
        "parameters": [
          {
            "name": "Post Id",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "postId": {
                  "type": "string",
                  "example" : "62f3d92ac6ca21665e1d8197",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Posts"
        ],
        "responses" : {
          "200" : {
            "description" : "Deleted boolean",
            "schema" : {
              "type" : "object",
              "properties" : {
                "deleted": {
                  "type" : "boolean",
                  "example" : "true"
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema": {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "404" : {
            "description" : "Post is not found",
            "schema" : {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Post is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/user/user": {
      "get": {
        "summary": "Endpoint to get information about the user/users",
        "description": "If the user you want to get information about is your friend you will get username, fullName, avatar, email, friends, memberSince, and id fields\nIf the user is not your friend you will get only username, fullName, avatar, and id fields",
        "security" : [ { "bearerAuth": [] } ],
        "parameters": [
          {
            "name": "user",
            "in": "query",
            "example" : "Mike",
            "description": "Username or fullName of the user you want to get information about",
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Array of User object/objects",
            "schema" : {
              "type": "array",
              "items" : {
                "$ref" : "#/definitions/Friend"
              }
            }
          },
          "404" : {
            "description" : "User is not found",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "User is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/user/confirm-email/{link}": {
      "get": {
        "summary": "Endpoint to confirm your email",
        "description": "",
        "parameters": [
          {
            "name": "link",
            "in": "path",
            "description": "randomly generated during registration string ",
            "example" : "18868049-1368-45d3-8756-647fc91282b3",
            "type": "string"
          }
        ],
        "tags": [
          "Users"
        ],
        "responses": {
          "200": {
            "description": "Single string 'confirmed'",
            "schema" : {
              "type": "string",
              "example" : "confirmed"
            }
          },
          "400": {
            "description": "Invalid activation link",
            "schema" : {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid activation link"
                },
                "errors": {
                  "type": "array",
                  "example": []
                }
              }
            }
          }
        }
      }
    },
    "/user/send-request": {
      "post": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to send request to become a friend with user",
        "description" : "",
        "parameters": [
          {
            "name": "Username of a user you want to be friend with",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "requestFriend": {
                  "type": "string",
                  "example" : "JackNicholson",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses" : {
          "200" : {
            "description" : "An array of your outcoming requests",
            "schema" : {
              "type" : "array",
              "example": ["JackNicholson", "DanielDayLevis", "AnthonyHopkins"]
            }
          },
          "400" : {
            "description" : "User is trying to send request to a user that is already his friend",
            "schema" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string",
                  "example" : "You are already friends with JackNicholson"
                },
                "errors" : {
                  "type" : "array",
                  "example" : []
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "404" : {
            "description" : "User is not found",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "User is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/user/accept-request" : {
      "post": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to accept request to become a friend with user",
        "description" : "",
        "parameters": [
          {
            "name": "Username of a user you want to accept request from",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "acceptFriend": {
                  "type": "string",
                  "example" : "JackNicholson",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses" : {
          "200" : {
            "description" : "An array of your friends",
            "schema" : {
              "type" : "array",
              "example": ["JackNicholson", "DanielDayLevis", "AnthonyHopkins"]
            }
          },
          "400" : {
            "description" : "User is trying to accept request from a user that is already his friend",
            "schema" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string",
                  "example" : "You are already friends with JackNicholson"
                },
                "errors" : {
                  "type" : "array",
                  "example" : []
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "404" : {
            "description" : "User is not found",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "User is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/user/reject-request" : {
      "post": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to reject request from a user",
        "description" : "",
        "parameters": [
          {
            "name": "Username of a user you want to reject",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "rejectFriend": {
                  "type": "string",
                  "example" : "JackNicholson",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses" : {
          "200" : {
            "description" : "An array of your friends",
            "schema" : {
              "type" : "array",
              "example": ["DanielDayLevis", "AnthonyHopkins"]
            }
          },
          "400" : {
            "description" : "User is trying to reject request from a user that is already his friend",
            "schema" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string",
                  "example" : "You are already friends with JackNicholson"
                },
                "errors" : {
                  "type" : "array",
                  "example" : []
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "404" : {
            "description" : "User is not found",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "User is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/user/delete-friend" : {
      "delete": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to delete user from your friends",
        "description" : "",
        "parameters": [
          {
            "name": "Username of a user you want to delete from your friends",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "deleteFriend": {
                  "type": "string",
                  "example" : "JackNicholson",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses" : {
          "200" : {
            "description" : "An array of your friends",
            "schema" : {
              "type" : "array",
              "example": ["DanielDayLevis", "AnthonyHopkins"]
            }
          },
          "400" : {
            "description" : "User is trying to delete user who is not his friend",
            "schema" : {
              "type" : "object",
              "properties" : {
                "message" : {
                  "type" : "string",
                  "example" : "You are not friends with JackNicholson"
                },
                "errors" : {
                  "type" : "array",
                  "example" : []
                }
              }
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "404" : {
            "description" : "User is not found",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "User is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/user/change-avatar" : {
      "post": {
        "security": [ { "bearerAuth": [] } ],
        "summary": "Endpoint to change your profile image",
        "description" : "",
        "parameters": [
          {
            "name": "new avatar",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "newAvatar": {
                  "type": "string",
                  "example" : "http://tachyons.io/img/avatar_1.jpg",
                  "required": true
                }
              }
            }
          }
        ],
        "tags": [
          "Users"
        ],
        "responses" : {
          "200" : {
            "description" : "New avatar",
            "schema" : {
              "type" : "string",
              "example" : "http://tachyons.io/img/avatar_1.jpg"
            }
          },
          "401" : {
            "description" : "Access token is not valid",
            "schema" : {
              "$ref" : "#/definitions/UnauthorizedError"
            }
          },
          "404" : {
            "description" : "User is not found",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "User is not found"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    },
    "/oauth/success" : {
      "get" : {
        "summary": "Authorization via Google or Facebook",
        "security" : [ { "oauthGoogle": [] }, { "oauthFacebook" : [] } ],
        "tags": [
          "OAuth"
        ],
        "responses": {
          "200" : {
            "description" : "User ID and access token",
            "schema": {
              "type": "object",
              "properties" : {
                "accessToken" : {
                  "$ref" : "#/definitions/Token"
                },
                "userId": {
                  "$ref": "#/definitions/ObjectId"
                }
              }
            }
          },
          "400" : {
            "description" : "Authorization failed",
            "schema": {
              "type": "object",
              "properties" : {
                "message": {
                  "type": "string",
                  "example" : "Authorization failed"
                },
                "errors": {
                  "type": "array",
                  "example" : []
                }
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "User" : {
      "description" : "User object",
      "type": "object",
      "properties": {
        "id" : {
          "$ref": "#/definitions/ObjectId"
        },
        "username": {
          "type": "string",
          "example": "Yevhen"
        },
        "fullName": {
          "type": "string",
          "example": "Yevhen Prudnik"
        },
        "email": {
          "type": "string",
          "example": "yevhen@gmail.com"
        },
        "avatar": {
          "type": "string",
          "example": "http://tachyons.io/img/avatar_1.jpg"
        },
        "memberSince": {
          "type": "date",
          "example" : "2022-08-11T06:19:53.226+00:00"
        },
        "confirmedEmail": {
          "type": "boolean",
          "example": false
        },
        "friends": {
          "type": "array",
          "items" : {
            "type" : "string",
            "example" : "Alex"
          }
        },
        "outcomingRequests": {
          "type": "array",
          "items" : {
            "type" : "string",
            "example" : "Mike"
          }
        },
        "incomingRequests": {
          "type": "array",
          "items" : {
            "type" : "string",
            "example" : "Fred"
          }
        },
        "createdVia" : {
          "type": "string",
          "example" : "facebook"
        }
      }
    },
    "Friend": {
      "description" : "User friend object",
      "type": "object",
      "properties": {
        "id" : {
          "$ref": "#/definitions/ObjectId"
        },
        "username": {
          "type": "string",
          "example": "Yevhen"
        },
        "fullName": {
          "type": "string",
          "example": "Yevhen Prudnik"
        },
        "email": {
          "type": "string",
          "example": "yevhen@gmail.com"
        },
        "avatar": {
          "type": "string",
          "example": "http://tachyons.io/img/avatar_1.jpg"
        },
        "memberSince": {
          "type": "date",
          "example" : "2022-08-11T06:19:53.226+00:00"
        },
        "friends": {
          "type": "array",
          "items" : {
            "type" : "string",
            "example" : "Alex"
          }
        }
      }
    },
    "Post":{
      "description": "Post object",
      "type" : "object",
      "properties": {
        "_id": {
          "$ref": "#/definitions/ObjectId"
        },
        "postedBy": {
          "type" : "string",
          "example" : "Yevhen"
        },
        "header": {
          "type": "string",
          "example" : "Post header"
        },
        "text": {
          "type": "string",
          "example" : "Post content example"
        },
        "likedBy": {
          "type": "array",
          "items" : {
            "type" : "string",
            "example" : "Alex"
          }
        },
        "date" : {
          "type": "date",
          "example" : "2022-08-11T06:19:53.226+00:00"
        },
        "comments": {
          "type": "array",
          "items" : {
            "type" : "object",
            "properties" : {
              "writtenBy": {
                "type" : "string",
                "example" : "Alex"
              },
              "comment": {
                "type": "string",
                "example" : "Some amazing comment"
              }, 
              "_id" : {
                "$ref": "#/definitions/ObjectId"
              }
            }
          }
        }
      }
    },
    "ObjectId" : {
      "description": "Object id from database",
      "type": "string",
      "example" : "62f3d39b345f9a03a827a562"
    },
    "Token" : {
      "description": "String that represents hashed information about the specific user",
      "type": "string",
      "example" : "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6IllldmhlbiIsImVtYWlsIjoieWV2aGVucHJ1ZG5pa0BnbWFpbC5jb20iLCJpZCI6IjYyZjI0M2U1ODJkZDQ3YmE1ZDM3OWYwMSIsImlhdCI6MTY2MDIxMTk2MCwiZXhwIjoxNjYwMjEzNzYwfQ.XVGBvCXBgrAcOG_HQBxeK9YaBvL22xfHoxBsNFM0wpI"
    },
    "UnauthorizedError": {
      "description" : "Access token is not valid",
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string",
          "example": "Unauthorized user"
        },
        "errors" : {
          "type" : "array",
          "example" : []
        }
      }
    },
    "InvalidIdError" : {
      "description" : "Object ID is not a valid",
      "type" : "object",
      "properties" : {
        "message" : {
          "type" : "string",
          "example": "Invalid Id"
        },
        "errors" : {
          "type" : "array",
          "example" : []
        }
      }
    }
  }
}